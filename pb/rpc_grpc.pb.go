// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: rpc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPCService_RequestCall_FullMethodName = "/CommonRPC.RPCService/RequestCall"
	RPCService_Streaming_FullMethodName   = "/CommonRPC.RPCService/Streaming"
)

// RPCServiceClient is the client API for RPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCServiceClient interface {
	RequestCall(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error)
	Streaming(ctx context.Context, opts ...grpc.CallOption) (RPCService_StreamingClient, error)
}

type rPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCServiceClient(cc grpc.ClientConnInterface) RPCServiceClient {
	return &rPCServiceClient{cc}
}

func (c *rPCServiceClient) RequestCall(ctx context.Context, in *RPCRequest, opts ...grpc.CallOption) (*RPCResponse, error) {
	out := new(RPCResponse)
	err := c.cc.Invoke(ctx, RPCService_RequestCall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCServiceClient) Streaming(ctx context.Context, opts ...grpc.CallOption) (RPCService_StreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &RPCService_ServiceDesc.Streams[0], RPCService_Streaming_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCServiceStreamingClient{stream}
	return x, nil
}

type RPCService_StreamingClient interface {
	Send(*RPCStreamMessage) error
	Recv() (*RPCStreamMessage, error)
	grpc.ClientStream
}

type rPCServiceStreamingClient struct {
	grpc.ClientStream
}

func (x *rPCServiceStreamingClient) Send(m *RPCStreamMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rPCServiceStreamingClient) Recv() (*RPCStreamMessage, error) {
	m := new(RPCStreamMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RPCServiceServer is the server API for RPCService service.
// All implementations must embed UnimplementedRPCServiceServer
// for forward compatibility
type RPCServiceServer interface {
	RequestCall(context.Context, *RPCRequest) (*RPCResponse, error)
	Streaming(RPCService_StreamingServer) error
	mustEmbedUnimplementedRPCServiceServer()
}

// UnimplementedRPCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRPCServiceServer struct {
}

func (UnimplementedRPCServiceServer) RequestCall(context.Context, *RPCRequest) (*RPCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCall not implemented")
}
func (UnimplementedRPCServiceServer) Streaming(RPCService_StreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method Streaming not implemented")
}
func (UnimplementedRPCServiceServer) mustEmbedUnimplementedRPCServiceServer() {}

// UnsafeRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCServiceServer will
// result in compilation errors.
type UnsafeRPCServiceServer interface {
	mustEmbedUnimplementedRPCServiceServer()
}

func RegisterRPCServiceServer(s grpc.ServiceRegistrar, srv RPCServiceServer) {
	s.RegisterService(&RPCService_ServiceDesc, srv)
}

func _RPCService_RequestCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServiceServer).RequestCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCService_RequestCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServiceServer).RequestCall(ctx, req.(*RPCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCService_Streaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RPCServiceServer).Streaming(&rPCServiceStreamingServer{stream})
}

type RPCService_StreamingServer interface {
	Send(*RPCStreamMessage) error
	Recv() (*RPCStreamMessage, error)
	grpc.ServerStream
}

type rPCServiceStreamingServer struct {
	grpc.ServerStream
}

func (x *rPCServiceStreamingServer) Send(m *RPCStreamMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rPCServiceStreamingServer) Recv() (*RPCStreamMessage, error) {
	m := new(RPCStreamMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RPCService_ServiceDesc is the grpc.ServiceDesc for RPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CommonRPC.RPCService",
	HandlerType: (*RPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestCall",
			Handler:    _RPCService_RequestCall_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Streaming",
			Handler:       _RPCService_Streaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}
